{"release":{"id":5097169,"name":"ReleaseGS1.0","project":{"id":33507014,"name":"gs-management","created_at":"2022-02-08T07:26:19.453Z","description":""},"tag_name":"ReleaseGS1.0","created_at":"2022-06-16T03:56:27.448Z","milestones":[],"description":"# gs-management\r\n\r\n\r\n```\r\ncd existing_repo\r\ngit remote add origin https://gitlab.com/saltovn/gs-management.git\r\ngit branch -M main\r\ngit push -uf origin main\r\n```\r\n\r\n## Test and Deploy\r\n\r\nUse the built-in continuous integration in GitLab.\r\n\r\n- [ ] [Analyze your code for known vulnerabilities with Static Application Security Testing(SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)\r\n- [ ] [Deploy to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy](https://docs.gitlab.com/ee/topics/autodevops/requirements.html)\r\n- [ ] [Use pull-based deployments for improved Kubernetes management](https://docs.gitlab.com/ee/user/clusters/agent/)\r\n- [ ] [Set up protected environments](https://docs.gitlab.com/ee/ci/environments/protected_environments.html)\r\n\r\n***\r\n\r\n## **Technology used:**\r\n\r\n- **[PHP: v8.1](https://www.php.net)**\r\n- **[MySQL: v8.0](https://www.mysql.com)**\r\n- **[Laravel: v8.75](https://laravel.com)**\r\n- **[Node: v14.16.1](https://nodejs.org/en/)**\r\n- **[Docker](https://www.docker.com/)**\r\n- **[Nginx: v1.8](https://www.nginx.com/)**\r\n- **[Javascript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)**\r\n- **[Html: v5](https://www.w3schools.com/html/)**\r\n- **[SCSS](https://sass-lang.com)**\r\n\r\n\r\n# **Setup environment on local**\r\n\r\n**Clone source trên git**\r\n\r\n```JS\r\nRun: git clone git@gitlab.com:saltovn/gs-management.git\r\nRun: git fetch --all\r\nRun: git pull -r\r\n```\r\n\r\n### **Notes:**\r\n\r\n- Branch **main**: Use for deploy to production\r\n- Branch **develop**: Use for develop\r\n\r\n**Setup local server:**\r\n\r\n```JS\r\nRun: cd gs-management\r\nRun: git fetch --all\r\nRun: git checkout develop\r\nRun: cp .env.example .env\r\nRun: docker-compose build\r\nRun: docker-compose up -d\r\n\r\n```\r\n**Migrate database:**\r\n```JS\r\n\r\nRun: docker exec -it gs-management_web bash\r\nRun: composer install\r\nRun: php artisan migrate:fresh --seed\r\n\r\n```\r\n**Database information:**\r\n```PHP\r\nDB_HOST=localhost\r\nDB_PORT=44336\r\nDB_DATABASE=gs\r\nDB_USERNAME=admin\r\nDB_PASSWORD=123123\r\n```\r\n\r\n**Setup website:**\r\n\r\n- Run: npm install --global yarn\r\n- Run: yarn install\r\n- Run: yarn watch (Build SCSS run on develop)\r\n- Run: yarn build (Build SCSS deploy to production)\r\n\r\n**Access website at local:**\r\n\r\n```PHP\r\nRun: yarn watch\r\n```\r\n\r\nFrontend: https://localhost:3000\r\n\r\nBackend: https://localhost:3000/{xxxx} xxxx =\u003e Read **PREFIX_ADMIN** in env (Default as **admin**)\r\n\r\n# Setup the staging environment\r\n\r\n## AWS EC2\r\n\r\n### Install PHP\r\nPHP 8\r\n```\r\n$ sudo yum -y update\r\n$ sudo yum install php80\r\n```\r\n\r\n### Install Nginx\r\n```\r\n$ sudo amazon-linux-extras install epel\r\n$ sudo amazon-linux-extras install nginx1\r\n$ sudo systemctl start nginx\r\n$ sudo systemctl enable nginx\r\n```\r\n\r\n### Install Mysql \r\n\r\n#### Download mysql\r\n```\r\n$ sudo yum install wget\r\nwget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm\r\n```\r\n\r\n#### Install mysql \r\n```\r\n$ sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm\r\n$ sudo yum install mysql-community-server\r\n```\r\n\r\n#### Start mysql\r\n```\r\n$ sudo service mysqld start\r\n$ chkconfig mysqld on\r\n```\r\n\r\n#### Get password root mysql auto generate\r\n```\r\n$ sudo grep 'temporary password' /var/log/mysqld.log\r\n```\r\n\r\n#### Login mysql with root\r\n```\r\n$ mysql -u root -p\r\n\r\nEnter password root: ********\r\n```\r\n\r\n#### Create database\r\n```\r\nmysql\u003e create database db_gs;\r\n```\r\n\r\n#### Create user mysql\r\n```\r\nmysql\u003e create user 'user_gs'@'localhost' identified by 'qc@123@GS';\r\n```\r\n\r\n#### Grant permission \r\n```\r\nmysql\u003e grant all on db_gs.* to user_gs@localhost;\r\n```\r\n\r\n#### Reload all the privileges\r\n```\r\nmysql\u003e FLUSH PRIVILEGES;\r\n```\r\n\r\n#### Logout\r\n```\r\nmysql\u003e exit;\r\n```\r\n\r\n### Install package\r\n```\r\n$ sudo yum install php-{pear,cgi,pdo,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip,locales,openssl}\r\n```\r\n\r\n## AWS App Runner\r\n\r\n### Update .env\r\n\r\n```\r\n- cp .env.example .env\r\n- Setup information to use Map API.\r\n```\r\n\r\n```PHP\r\nEMAP_URL=\"https://test.core.its-mo.com\"\r\nEMAP_CLIENT_ID=\"JSZ3defe480b181|hftWy\"\r\nEMAP_AUTH_TYPE=\"ip\"\r\n\r\nMAP_URL=\"https://api.its-mo.com/v3/loader?key=${EMAP_CLIENT_ID}\u0026api=zdcmap.js,control.js,shape.js,imglayer.js,wms.js\u0026enc=UTF8\"\r\n```\r\n\r\n### Update AWS CLI config\r\nEdit file: docker/deploy/.aws/credentials\r\n\r\naws_access_key_id = AKIA54E4Y3OUUC6TGXXX\r\naws_secret_access_key = 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\r\n\r\n### Creating a private repository AWS ECR\r\n\r\n1. Open the Amazon ECR console at https://console.aws.amazon.com/ecr/repositories.\r\n\r\n2. From the navigation bar, choose the Region to create your repository in.\r\n\r\n3. In the navigation pane, choose Repositories.\r\n\r\n4. On the Repositories page, choose Create repository.\r\n\r\n5. For Repository name, enter a unique name for your repository. The repository name can be specified on its own (for example everintegration).\r\n\r\n6. For Tag immutability, choose the tag mutability setting for the repository. Repositories configured with immutable tags prevent image tags from being overwritten.\r\n\r\n7. Choose Create repository.\r\n\r\nNote: Account need  permission ecr:CreateRepository\r\n\r\n### Creating a local Docker image\r\n\r\n```\r\n$ cd \u003cpath_root\u003e\r\n$ docker build -t everintegration -f docker/deploy/Dockerfile .\r\n```\r\n\r\n### Push a Docker image to AWS ECR\r\n#### Authenticate your Docker\r\n\r\n```\r\n$ cd \u003cpath_root\u003e/docker/deploy\r\n$ make login\r\n```\r\n**Note: Example**\r\n\r\n```\r\n\u003cregion\u003e: ap-northeast-1\r\n\u003caws_account_id\u003e: 953811524521\r\n```\r\n\r\n#### Push the image\r\n\r\n```\r\n$ make push\r\n```\r\n\r\n#### Deploy image\r\n\r\n```\r\n$ make deploy\r\n```\r\n\r\n### Creating an App Runner service\r\n**NOTE: Account need permission**\r\n\r\n`apprunner:CreateService`\r\n\r\n`iam:CreateServiceLinkedRole`\r\n\r\n#### Configure your source code.\r\n\r\n1. Open the App Runner console, and in the Regions list, select your AWS Region.\r\n\r\n2. If the AWS account doesn't have any App Runner services yet, the console home page is displayed. Choose Create an App Runner service.\r\n\r\n![image-5.png](./.images/image-5.png)\r\n\r\nIf the AWS account has existing services, the Services page with a list of your services is displayed. Choose Create service.\r\n\r\n![image-4.png](./.images/image-4.png)\r\n\r\n3. On the Source and deployment page, in the Source section, for Repository type, choose Container registry.\r\n\r\n4. For Provider, choose the provider where your image is stored:\r\n- Amazon ECR – A private image stored in Amazon ECR.\r\n\r\n5. For Container image URI, choose Browse.\r\n\r\n6. In the Select Amazon ECR container image dialog box, for Image repository, select the repository that contains your image.\r\n\r\n7. For Image tag, select the specific image tag that you want to deploy, for example, latest, and then choose Continue.\r\n\r\n![image-3.png](./.images/image-3.png)\r\n\r\n#### Configure your deployments.\r\n\r\n1. In the Deployment settings section, choose Manual.\r\n\r\n2. [Amazon ECR provider] For ECR access role, choose an existing service role in your account or choose to create a new role. If you're using manual deployment, you can also choose to use the IAM user role at the time of deployment.\r\n\r\n3. Choose Next.\r\n\r\n![image-2.png](./.images/image-2.png)\r\n\r\n#### Configure your service.\r\n\r\n1. On the Configure service page, in the Service settings section, enter a service name and the IP port `8000` that your service web site listens to.\r\n\r\n2. Choose Next.\r\n\r\n![image-1.png](./.images/image-1.png)\r\n\r\n3. On the Review and create page, verify all the details that you entered, and then choose Create and deploy.\r\n\r\nResult: If service creation succeeds, the console should show the service dashboard, with a Service overview of the new service.\r\n\r\n![image.png](./.images/image.png)\r\n\r\n4. Verify that your service is running.\r\n\r\n- On the service dashboard page, wait until the service Status is Running.\r\n\r\n- Choose the Default domain value—it's the URL to your service's website.\r\n\r\n- Use your website and verify that it's running properly.\r\n\r\n#### Deploy(Command line)\r\n\r\n`make deploy`\r\n \r\n#### Migrate Database\r\n\r\n`make makemigrations`\r\n`make migrate`\r\n\r\n#### Create System Admin account\r\n\r\n`make createsuperuser`\r\n"}}